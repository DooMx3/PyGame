(globals().update({"pygame": __import__("pygame"), "math": __import__("math"), "move_vector": lambda dx, dy, dist: ((dx / math.sqrt(dx**2 + dy**2)) * dist, (dy / math.sqrt(dx**2 + dy**2)) * dist), "none": lambda *args: None}), pygame.init(), globals().update({"window": pygame.display.set_mode((1280, 720)), "bg": pygame.image.load("polana.png"), "projs": list(), "Player": type("Player", (), {"__init__": lambda self: none(setattr(self, "x", 100), setattr(self, "y", 600), setattr(self, "img", pygame.image.load("john.png"))), 'incx': lambda self, amount: setattr(self, 'x', self.x + amount), "tick": lambda self, keys: ([self.incx(-2) for _ in range(1) if keys[pygame.K_a]], [self.incx(2) for _ in range(1) if keys[pygame.K_d]], [projs.append(Proj(self.x, self.y, *move_vector(pygame.mouse.get_pos()[0] - self.x, pygame.mouse.get_pos()[1] - self.y, 10))) for _ in range(1) if keys[pygame.K_SPACE]]), "draw": lambda self, w: w.blit(self.img, (self.x, self.y))}), "Proj": type("Proj", (), {"__init__": lambda self, x, y, mx, my: none(setattr(self, "x", x), setattr(self, "y", y), setattr(self, "mx", mx), setattr(self, "my", my)), "tick": lambda self: (setattr(self, "x", self.x + self.mx), setattr(self, "y", self.y + self.my)), "draw": lambda self, win: pygame.draw.circle(win, (50, 10, 230), (self.x, self.y), 15)})}), globals().update({"player": Player()}), [(player.tick(pygame.key.get_pressed()), [p.tick() for p in projs], window.blit(bg, (0, 0)), player.draw(window), [p.draw(window) for p in projs], pygame.display.update()) if not any([event.type == pygame.QUIT for event in pygame.event.get()]) else quit() for _ in iter(int, 1)])
